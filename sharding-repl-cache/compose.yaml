version: '3'
name: sharding-repl-cache
services:

  # сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард, 1-я реплика
  shard1-1:
    image: mongo:latest
    container_name: shard1-1
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.20
    volumes:
      - shard1-data-1:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1ReplSet", # название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард, 2-я реплика
  shard1-2:
    image: mongo:latest
    container_name: shard1-2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.21
    volumes:
      - shard1-data-2:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1ReplSet",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард, 3-я реплика
  shard1-3:
    image: mongo:latest
    container_name: shard1-3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.22
    volumes:
      - shard1-data-3:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1ReplSet",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард, 1-я реплика
  shard2-1:
    image: mongo:latest
    container_name: shard2-1
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.30
    volumes:
      - shard2-data-1:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2ReplSet", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард, 2-я реплика
  shard2-2:
    image: mongo:latest
    container_name: shard2-2
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.31
    volumes:
      - shard2-data-2:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2ReplSet", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард, 3-я реплика
  shard2-3:
    image: mongo:latest
    container_name: shard2-3
    restart: always
    networks:
      app-network:
        ipv4_address: 173.17.0.32
    volumes:
      - shard2-data-3:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2ReplSet", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.40
    command:
      [
        "mongos", # обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017", # передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - configSrv
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020/"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"


  redis:
      image: "redis:latest"
      container_name: redis
      ports:
        - "6379"
      volumes:
        - redis_data:/data
        - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
      networks:
        app-network:
          ipv4_address: 173.17.0.2

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-data-1:
  shard1-data-2:
  shard1-data-3:
  shard2-data-1:
  shard2-data-2:
  shard2-data-3:
  redis_data:


